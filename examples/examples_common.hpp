// Copyright (c) 2012, Evgeny Panasyuk

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// e-mail: E?????[dot]P???????[at]gmail.???

#ifndef EXAMPLES_COMMON_HPP
#define EXAMPLES_COMMON_HPP

#include <ostream>
#include <iostream>
#include <streambuf>
#include <sstream>
#include <string>
#include <ios>
#include <cstdlib>

class ExpectedStreamOutput
{
    std::string expected;
    std::ostringstream substituted_stream;
    std::ostream &original_stream;
    std::streambuf &original_streambuf;
public:
    ExpectedStreamOutput(std::ostream &stream,const char *expected_)
        : expected(expected_), original_stream(stream), original_streambuf(*(stream.rdbuf(substituted_stream.rdbuf())))
    {
    }
    bool check()
    {
        return substituted_stream.str() == expected;
    }
    ~ExpectedStreamOutput()
    {
        original_stream.rdbuf(&original_streambuf);
        original_stream << substituted_stream.str();
    }
};

class ExpectedStdoutTest
{
    std::ios_base::Init init_std_streams;
    ExpectedStreamOutput test;
public:
    ExpectedStdoutTest(const char *expected)
        : test(std::cout,expected)
    {
    }
    ~ExpectedStdoutTest()
    {
        if(!test.check()) std::exit(1);
    }
};

template<typename T1> inline
void suppress_unused_warning(const T1&){};
template<typename T1,typename T2> inline
void suppress_unused_warning(const T1&,const T2&){};
template<typename T1,typename T2,typename T3> inline
void suppress_unused_warning(const T1&,const T2&,const T3&){};
template<typename T1,typename T2,typename T3,typename T4> inline
void suppress_unused_warning(const T1&,const T2&,const T3&,const T4&){};
template<typename T1,typename T2,typename T3,typename T4,typename T5> inline
void suppress_unused_warning(const T1&,const T2&,const T3&,const T4&,const T5&){};
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6> inline
void suppress_unused_warning(const T1&,const T2&,const T3&,const T4&,const T5&,const T6&){};
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6,typename T7> inline
void suppress_unused_warning(const T1&,const T2&,const T3&,const T4&,const T5&,const T6&,const T7&){};



#endif

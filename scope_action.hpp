// Copyright (c) 2012, Evgeny Panasyuk

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef STACK_UNWINDING_SCOPE_GUARD_HPP
#define STACK_UNWINDING_SCOPE_GUARD_HPP

#include <stack_unwinding.hpp>

namespace stack_unwinding
{

class scope_action_base
{
    scope_action_base &operator=(const scope_action_base&);
protected:
    scope_action_base(const scope_action_base&){};
    ~scope_action_base() {}
public:
    scope_action_base(){};
};

typedef const scope_action_base &scope_action;

template<typename Action>
class scope_success: public scope_action_base
{
    unwinding_indicator indicator;
    Action action_;
public:
    scope_success(const Action &action) : action_(action) {}
    ~scope_success()
    {
        if(!indicator.unwinding())
            action_();
    }
};

template<typename Action>
class scope_failure: public scope_action_base
{
    unwinding_indicator indicator;
    Action action_;
public:
    scope_failure(const Action &action) : action_(action) {}
    ~scope_failure()
    {
        if(indicator.unwinding())
            action_();
    }
};

template<typename Action>
struct scope_exit: public scope_action_base
{
    Action action_;
public:
    scope_exit(const Action &action) : action_(action) {}
    ~scope_exit()
    {
        action_();
    }
};

template<template<typename> class ScopeAction,typename Action>
ScopeAction<Action> make(const Action &action)
{
    return ScopeAction<Action>(action);
}

}

#endif

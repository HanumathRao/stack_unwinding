// Copyright (c) 2012, Evgeny Panasyuk

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// e-mail: E?????[dot]P???????[at]gmail.???

#ifndef STACK_UNWINDING_HPP
#define STACK_UNWINDING_HPP

#if defined(_MSC_VER) || defined(__GNUG__) || defined(__CLANG__)
    #define UNCAUGHT_EXCEPTION_COUNT_SUPPORTED 1
#else
    #include <exception>
#endif

namespace stack_unwinding
{

#if defined(UNCAUGHT_EXCEPTION_COUNT_SUPPORTED)
unsigned uncaught_exception_count();
#endif

// TODO: describe interface/preconditions. For instance, maybe with another underlying implementation
//       capturing of state will be not needed - so, maybe users should use empty base class optimization.
class unwinding_indicator
{
#if defined(UNCAUGHT_EXCEPTION_COUNT_SUPPORTED)
private:
    unsigned enter_state; // TODO: possibly to store and compare only last bit of uncaught exceptions count,
                          //       in order to reduce size, check this
public:
    unwinding_indicator() : enter_state(uncaught_exception_count()) {}
    bool unwinding()
    {
        return enter_state!=uncaught_exception_count(); // TODO: looks like wrong result is possible for "floating" objects,
                                                        //       i.e. object created during stack unwinding, which
                                                        //       outlived unwinding process.
                                                        //       Describe limitation in interface or develop better solution
                                                        //       (maybe inspecting call stack for caller)
    }
    bool probably_unwinding()
    {
        return unwinding();
    }
#else
public:
    bool probably_unwinding()
    {
        return std::uncaught_exception();
    }
#endif
};

// _________________________________________________________
// Implementation
#if defined(_MSC_VER)
namespace details {extern "C" char * _getptd(); }
inline unsigned uncaught_exception_count()
{
    // MSVC specific. Tested on {MSVC2005SP1,MSVC2008SP1,MSVC2010SP1,MSVC2012}x{x32,x64}.
    return *(static_cast<unsigned*>(static_cast<void*>( details::_getptd() + (sizeof(void*)==8 ? 0x100 : 0x90) ))); // x32 offset - 0x90 , x64 - 0x100
}
#elif defined(__GNUG__) || defined(__CLANG__)
namespace details { extern "C" char * __cxa_get_globals(); }
inline unsigned uncaught_exception_count()
{
    // Tested on {clang 3.2,GCC 4.1.2,GCC 4.4.6}x{x32,x64}
    return *(static_cast<unsigned*>(static_cast<void*>( details::__cxa_get_globals() + (sizeof(void*)==8 ? 0x8 : 0x4) ))); // x32 offset - 0x4 , x64 - 0x8
}
#endif

}

#endif
